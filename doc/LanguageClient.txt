*LanguageClient.txt* Language Server Protocol support for neovim


==============================================================================
CONTENTS                                               *LanguageClientContents*

1. Usage ....................... |LanguageClientUsage|
2. Configuration ............... |LanguageClientConfiguration|
3. Commands .................... |LanguageClientCommands|
4. Functions ................... |LanguageClientFunctions|
5. Events ...................... |LanguageClientEvents|
6. License ..................... |LanguageClientLicense|
7. Bugs ........................ |LanguageClientBugs|
8. Contributing ................ |LanguageClientContributing|

==============================================================================
1. Usage                                                 *LanguageClientUsage*

Before using of LanguageClient, it is necessary to specify commands that are
going to be used to start language server. See |LanguageClient_serverCommands|
for detail. Here is a simple example config: >

    let g:LanguageClient_serverCommands = {
        \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
        \ }

After that, open a file with one of the above filetypes, functionalities
provided by language servers should be available out of the box.

At this point, call any provided function as you like. See
|LanguageClientFunctions| for a complete list of functions. Usually one would
like to map these functions to shortcuts, for example: >

    nnoremap <silent> K :call LanguageClient_textDocument_hover()<CR>
    nnoremap <silent> gd :call LanguageClient_textDocument_definition()<CR>
    nnoremap <silent> <F2> :call LanguageClient_textDocument_rename()<CR>

If one is using deoplete/nvim-completion-manager at the same time, completion
should work out of the box. Otherwise, completion is available with 'C-X C-O'
('omnifunc').

Alternatively, set 'completefunc': >
    set completefunc=LanguageClient#complete
<
If the language server supports, diagnostic/lint information will be displayed
via gutter and syntax highlighting with real time editing. At the same time,
those info are populated into quickfix list (or location list), which can be
accessed by regular quickfix/location list operations.

To use the language server with Vim's formatting operator |gq|, set 'formatexpr': >
    set formatexpr=LanguageClient_textDocument_rangeFormatting()
<

==============================================================================
2. Configuration                                 *LanguageClientConfiguration*

2.1 g:LanguageClient_serverCommands          *g:LanguageClient_serverCommands*

String to list map. Defines commands to start language server for specific
filetype. For example: >

    let g:LanguageClient_serverCommands = {
        \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
        \ }

Default: {}

2.2 g:LanguageClient_diagnosticsDisplay  *g:LanguageClient_diagnosticsDisplay*

Control how diagnostics messages are displayed.

Default: >
    {
        1: {
            "name": "Error",
            "texthl": "ALEError",
            "signText": "✖",
            "signTexthl": "ALEErrorSign",
        },
        2: {
            "name": "Warning",
            "texthl": "ALEWarning",
            "signText": "⚠",
            "signTexthl": "ALEWarningSign",
        },
        3: {
            "name": "Information",
            "texthl": "ALEInfo",
            "signText": "ℹ",
            "signTexthl": "ALEInfoSign",
        },
        4: {
            "name": "Hint",
            "texthl": "ALEInfo",
            "signText": "➤",
            "signTexthl": "ALEInfoSign",
        },
    }

2.4 g:LanguageClient_changeThrottle      *g:LanguageClient_changeThrottle*

Interval in seconds during which textDocument_didChange is suppressed. For
example: >

    let g:LanguageClient_changeThrottle = 0.5

This will make LanguageClient pause 0.5 second to send text changes to server
after one textDocument_didChange is sent.

Default: 0. No throttling.

2.5 g:LanguageClient_autoStart                  *g:LanguageClient_autoStart*

Whether to start language servers automatically when opening a file of
associated filetype.

Default: 1.

2.6 g:LanguageClient_selectionUI                *g:LanguageClient_selectionUI*

Selection UI used when there are multiple entries.

Default: If fzf is loaded, use "fzf", otherwise use "location-list".
Valid options: "fzf" | "location-list"

2.7 g:LanguageClient_trace                           *g:LanguageClient_trace*

Trace setting passed to server.

Default: "off"
Valid options: "off" | "messages" | "verbose"

2.8 g:LanguageClient_diagnosticsList        *g:LanguageClient_diagnosticsList*

List used to fill diagnostic messages.

Default: "quickfix"
Valid options: "quickfix" | "location" | ""

2.9 g:LanguageClient_diagnosticsEnable    *g:LanguageClient_diagnosticsEnable*

Whether to handle diagnostic messages, including gutter, highlight and
quickfix/location list.

Default: 1
Valid options: 1 | 0

2.10 g:LanguageClient_windowLogMessageLevel  *g:LanguageClient_windowLogMessageLevel*

Maximum MessageType to show messages from window/logMessage notifications.

Default: "Warning"
Valid options: "Error" | "Warning" | "Info" | "Log"

2.11 g:LanguageClient_settingsPath              *g:LanguageClient_settingsPath*

Default path for language server settings

Default: ".vim/settings.json"

2.12 g:LanguageClient_loadSettings             *g:LanguageClient_loadSettings*

Whether to load language server settings.

Default: 0
Valid options: 1 | 0

2.13 g:LanguageClient_loggingLevel           *g:LanguageClient_loggingLevel*

Logging level.

Default: 'WARN'
Valid options: 'DEBUG' | 'INFO' | 'WARN' | 'ERROR'

2.14 g:LanguageClient_rootMarkers              *g:LanguageClient_rootMarkers*

Customized project root markers. Generally a heuristic algorithm within this
plugin should be able to detect project root automatically. This option is
provided in case the algorithm failed.

Example setting 1. List of string array. Shell-like glob is supported. >
    let g:LanguageClient_rootMarkers = ['.root', 'project.*']

Example setting 2. Map filetype to string array. >
    let g:LanguageClient_rootMarkers = {
        \ 'javascript': ['project.json'],
        \ 'rust': ['Cargo.toml'],
        \ }

Default: v:null
Valid option: Array<String> | Map<String, Array<String>>

==============================================================================
3. Commands                                           *LanguageClientCommands*

3.1 LanguageClientStart                                  *LanguageClientStart*

Start language server for current buffer.

3.2 LanguageClientStop                                    *LanguageClientStop*

Stop current language server.

==============================================================================
4. Functions                                          *LanguageClientFunctions*

4.1 LanguageClient_textDocument_hover()
*LanguageClient_textDocument_hover*

Show type info (and short doc) of identifier under cursor.

4.2 LanguageClient_textDocument_definition()
*LanguageClient_textDocument_definition*

Goto definition of identifier under cursor.

4.3 LanguageClient_textDocument_rename()
*LanguageClient_textDocument_rename*

Rename identifier under cursor.

4.4 LanguageClient_textDocument_documentSymbol()
*LanguageClient_textDocument_documentSymbol*

List of current buffer's symbols.

If optional dependency FZF is installed, symbols will be displayed in a FZF
prompt, selecting one of the symbol will then goto the symbol's definition.

For Denite users, a source with name 'documentSymbol' is provided.

4.5 LanguageClient_textDocument_references()
*LanguageClient_textDocument_references*

List all references of identifier under cursor.

If optional dependency FZF is installed, locations will be displayed in a FZF
prompt, selecting one of the entry will then goto the reference location.

For Denite users, a source with name 'references' is provided.

4.6 LanguageClient_workspace_symbol()
*LanguageClient_workspace_symbol*

List of project's symbols.

If optional dependency FZF is installed, symbols will be displayed in a FZF
prompt, selecting one of the symbol will then goto the symbol's definition.

For Denite users, a source with name 'workspaceSymbol' is provided.

4.7 LanguageClient_textDocument_completion()
*LanguageClient_textDocument_completion*

Get a list of completion items at current editing location. Note, this is an
synchronous call.

When using a supported completion manager (deoplete and
nvim-completion-manager are supported), completion should work out of the box.

4.8 LanguageClient_setLoggingLevel(level: str)
*LanguageClient_setLoggingLevel*

Set the plugin logging level. By default, only errors are logged into
/tmp/LanguageClient.log (%TMP%/LanguageClient.log for Windows).

Valid logging levels are 'ERROR'(default), 'INFO', 'DEBUG'.

4.9 LanguageClient_textDocument_formatting()
*LanguageClient_textDocument_formatting*

Format current document.

4.10 LanguageClient_textDocument_rangeFormatting()
*LanguageClient_textDocument_rangeFormatting*

Format selected lines.

4.11 LanguageClient#Notify(method: str, params: Dict)
*LanguageClient_notify*

Send a notification to the current language server.

4.12 LanguageClient#Call(method: str, params: Dict, callback: function | list)
*LanguageClient#Call*

Call a method to the current language server.

4.12 LanguageClient_serverStatus()           *LanguageClient_serverStatus*

Get language server status. 0 for server idle. 1 for server busy.

4.13 LanguageClient_serverStatusMessage()
*LanguageClient_serverStatusMessage*

Get a detail message of server status.

4.14 LangugeClient_statusLine() *LanguageClient_statusLine*

Example status line making use of LanguageClient_serverStatusMessage.

4.15 LanguageClient_workspace_applyEdit(params: Dict, callback: function | list)
*LanguageClient_workspace_applyEdit*

Apply a workspace edit.

==============================================================================
5. Events                                               *LanguageClientEvents*

LanguageClient provides two events for use with |User| |autocmd|s.

5.1 LanguageClientStarted
*LanguageClientStarted*

This event is triggered after LanguageClient has successfully started.

5.2 LanguageClientStopped
*LanguageClientStopped*

This event is triggered after LanguageClient has stopped.

Example: >
  augroup LanguageClient_config
    autocmd!
    autocmd User LanguageClientStarted setlocal signcolumn=yes
    autocmd User LanguageClientStopped setlocal signcolumn=auto
  augroup END

5.3 LanguageClientDiagnosticsChanged
*LanguageClientDiagnosticsChanged*

This event is triggered when diagnostics changed.

==============================================================================
6. License                                             *LanguageClientLicense*

The MIT License.

==============================================================================
7. Bugs                                                   *LanguageClientBugs*

Please report all bugs at https://github.com/autozimu/LanguageClient-neovim/issues

If you believe you've find a bug in this plugin, please first try to help
narrow down where the error happens, which will reduce bug fix time/effort
tremendously.

Try increasing logging level to 'INFO' or 'DEBUG' using the
|LanguageClient_setLoggingLevel| function, and check the log file.

There is also an utility script in: >

    $RUNTIME/rplugin/python3/LanguageClient/wrapper.sh

which can work like a proxy and logs all stdin and stdout of the language
server into a log file.

==============================================================================
8. Contributing                                   *LanguageClientContributing*

https://github.com/autozimu/LanguageClient-neovim

vim: ft=help
